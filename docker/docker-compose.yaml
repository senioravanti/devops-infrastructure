name: devops-infrastructure

volumes:
  devops-infrastructure-portainer-data:
  devops-infrastructure-s3-data:
  devops-infrastructure-mongodb-data:
  devops-infrastructure-valkey-data:
  devops-infrastructure-postgres-data:

networks:
  auth-service-net:
    name: nginx-auth-service-net
    external: true
  caffegql-net:
    name: nginx-caffegql-net
    external: true
  s3-service-net:
    name: nginx-s3-service-net
    external: true
  caffe-net:
    name: nginx-caffe-net
    external: true
  helpdesk-bot-net:
    name: nginx-helpdesk-bot-net
    external: true

services:
  portainer:
    image: 'portainer/portainer-ce:lts'
    container_name: devops-infrastructure-portainer

    restart: unless-stopped

    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'devops-infrastructure-portainer-data:/data'
      - "${SSL_LETSENCRYPT_PATH}:/certs:ro"

    command: >
      --sslcert /certs/fullchain.pem
      --sslkey /certs/privkey.pem

    ports:
      - '8000:8000'
      - '9443:9443'

  minio:
    image: 'bitnami/minio:2025'
    container_name: 'devops-infrastructure-s3'

    restart: 'on-failure:3'

    healthcheck:
      test: curl -sSi http://127.0.0.1:9000/minio/health/live
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

    env_file:
      - './environment/.env.minio'

    volumes:
      - 'devops-infrastructure-s3-data:/bitnami/minio/data'

  webserver:
    image: 'nginx:1.29.0-alpine3.22'
    container_name: 'devops-infrastructure-webserver'

    restart: unless-stopped

    depends_on:
      minio:
        condition: service_healthy

    volumes:
      - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './nginx/proxy.conf:/etc/nginx/proxy.conf:ro'
      - './nginx/server_https2.conf:/etc/nginx/server_https2.conf:ro'
      - "${SSL_PRIVATE_PATH}/nginx:/etc/ssl/nginx:ro"

    networks:
      default:
      auth-service-net:
      caffegql-net:
      s3-service-net:
      caffe-net:
      helpdesk-bot-net:

    ports:
      - '443:443'

  mongodb:
    image: "mongo:${MONGODB_VERSION}-noble"
    container_name: 'devops-infrastructure-mongodb'

    restart: 'on-failure:3'
    
    healthcheck:
      test: |
        mongosh "mongodb://$${MONGO_INITDB_ROOT_USERNAME}:$${MONGO_INITDB_ROOT_PASSWORD}@senioravanti.ru:27017/?tls=true" \
          --eval 'db.runCommand("ping").ok' --quiet
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s

    volumes:
      - 'devops-infrastructure-mongodb-data:/data/db'
      - './mongodb/mongodb.conf:/etc/mongodb.conf:ro'
      - "${SSL_PRIVATE_PATH}/mongodb:/etc/ssl/mongodb:ro"

    env_file:
      - './environment/.env.mongodb'

    command: --config /etc/mongodb.conf

    ports:
      - '27017:27017'

  valkey:
    image: "valkey/valkey:${VALKEY_VERSION}-alpine3.22"
    container_name: 'devops-infrastructure-valkey'

    restart: 'on-failure:3'

    healthcheck:
      test: |
        valkey-cli -h senioravanti.ru -a "$$VALKEY_PASSWORD" --no-auth-warning -t 5 \
          --tls --cacert /etc/ssl/certs/isrgrootx1.pem --json ping \
          | grep -q PONG
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

    env_file:
      - './environment/.env.valkey'

    volumes:
      - 'devops-infrastructure-valkey-data:/data'
      - './valkey/scripts/docker-valkey-entrypoint.sh:/usr/local/bin/docker-valkey-entrypoint.sh'
      - "${SSL_PRIVATE_PATH}/valkey:/etc/ssl/valkey:ro"
      - "${SSL_LETSENCRYPT_CA_PATH}:/etc/ssl/certs/isrgrootx1.pem:ro"

    command: 'docker-valkey-entrypoint.sh'

    ports:
      - '6379:6379'

  postgres:
    image: "postgres:$POSTGRES_TAG"
    container_name: 'devops-infrastructure-postgres'

    restart: 'on-failure:3'

    shm_size: 256mb

    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

    volumes:
      - 'devops-infrastructure-postgres-data:/var/lib/postgresql/data'
      
      - './postgres/postgresql.conf:/usr/local/share/postgresql/postgresql.conf'
      - './postgres/pg_hba.conf:/usr/local/share/postgresql/pg_hba.conf'
            
      - "${SSL_PRIVATE_PATH}/postgres:/etc/ssl/postgres:ro"

    env_file:
      - './environment/.env.postgres'

    command: -c config_file=/usr/local/share/postgresql/postgresql.conf

    ports:
      - '5432:5432'
